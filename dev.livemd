# Kino_K8s Demo

```elixir
# Mix.install([{:kino_k8s, github: "mruoss/kino_k8s"}])
Mix.install([{:kino_k8s, path: "~/src/community/kino_k8s"}])
```

## Section

<!-- livebook:{"attrs":{"mix_env":"dev","opts":{"context":"rancher-desktop","insecure_skip_tls_verify":true},"result_variable":"conn","source":"~/.kube/config","source_type":"file"},"chunks":null,"kind":"Elixir.KinoK8s.ConnectionCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, conn} =
  K8s.Conn.from_file("~/.kube/config",
    context: "rancher-desktop",
    insecure_skip_tls_verify: true
  )
```

<!-- livebook:{"attrs":{"connection":{"conn_hash":37669473,"variable":"conn"},"connections":[{"conn_hash":37669473,"variable":"conn"}],"gvk":{"api_version":"v1","index":"v1configmaps","kind":"ConfigMap","name":"configmaps","namespaced":true},"mix_env":"dev","namespace":"default","namespaces":["__ALL__","default","kube-system","kube-public","kube-node-lease","collab-api"],"request_type":"get","request_types":["get","list","watch"],"resource":"kube-root-ca.crt","resources":["kube-root-ca.crt","kino-k8s-cm"],"result_type":"list","result_types":{"get":null,"list":["list","stream"],"watch":["stream"]},"result_variable":"result"},"chunks":null,"kind":"Elixir.KinoK8s.GetCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, result} =
  K8s.Client.get("v1", "configmaps", name: "kube-root-ca.crt", namespace: "default")
  |> K8s.Client.put_conn(conn)
  |> K8s.Client.run()

result |> Ymlr.document!() |> IO.puts()
```

<!-- livebook:{"attrs":{"body":"kind: ConfigMap\napiVersion: v1\nmetadata:\n  name: kino-k8s-cm\n  namespace: default\ndata:\n  key: default\n","connection":{"conn_hash":37669473,"variable":"conn"},"connections":[{"conn_hash":37669473,"variable":"conn"}],"method":"create","methods":["apply","create","update"],"result_variable":"applied_resource"},"chunks":null,"kind":"Elixir.KinoK8s.ApplyCell","livebook_object":"smart_cell"} -->

```elixir

```

<!-- livebook:{"attrs":{"connect_to":"logs","connect_tos":["exec","logs"],"connection":{"conn_hash":37669473,"variable":"conn"},"connections":[{"conn_hash":37669473,"variable":"conn"}],"container":"lb-tcp-80","containers":["lb-tcp-80","lb-tcp-443"],"mix_env":"dev","namespace":"kube-system","namespaces":["default","kube-system","kube-public","kube-node-lease","collab-api"],"pod":"svclb-traefik-d6dd8e93-fkqnz","pods":["svclb-traefik-d6dd8e93-fkqnz","traefik-66c46d954f-wqx7m","coredns-597584b69b-xxbkz","local-path-provisioner-79f67d76f8-b48ds","metrics-server-5f9f776df5-rvlgr"]},"chunks":null,"kind":"Elixir.KinoK8s.TerminalCell","livebook_object":"smart_cell"} -->

```elixir
connect_to_pod = fn terminal_kino_pid ->
  {:ok, send_to_websocket} =
    K8s.Client.connect(
      "v1",
      "pods/log",
      [namespace: "kube-system", name: "svclb-traefik-d6dd8e93-fkqnz"],
      container: "lb-tcp-80",
      tailLines: 100,
      follow: true
    )
    |> K8s.Client.put_conn(conn)
    |> K8s.Client.stream_to(terminal_kino_pid)

  send_to_websocket
end

KinoK8s.KinoTerminal.open(connect_to_pod)
```
