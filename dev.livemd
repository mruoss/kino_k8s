# Kino_K8s Development

```elixir
# Mix.install([{:kino_k8s, github: "mruoss/kino_k8s"}])
Mix.install([{:kino_k8s, path: "~/src/community/kino_k8s"}])
```

## Section

<!-- livebook:{"attrs":{"opts":{"context":"kind-kino-k8s","insecure_skip_tls_verify":true},"result_variable":"conn","source":"~/.kube/config","source_type":"file"},"chunks":null,"kind":"Elixir.KinoK8s.ConnectionCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, conn} =
  K8s.Conn.from_file("~/.kube/config",
    context: "kind-kino-k8s",
    insecure_skip_tls_verify: true
  )

conn
```

<!-- livebook:{"attrs":{"connect_to":"exec","connect_tos":["exec","logs"],"connection":{"conn_hash":100330371,"variable":"conn"},"connections":[{"conn_hash":100330371,"variable":"conn"}],"container":"busybox","containers":["busybox"],"namespace":"kino-k8s","namespaces":["default","kino-k8s","kube-node-lease","kube-public","kube-system","local-path-storage"],"pod":"busybox","pods":["busybox"]},"chunks":null,"kind":"Elixir.KinoK8s.TerminalCell","livebook_object":"smart_cell"} -->

```elixir
connect_to_pod = fn terminal_kino_pid ->
  {:ok, send_to_websocket} =
    K8s.Client.connect("v1", "pods/exec", [namespace: "kino-k8s", name: "busybox"],
      container: "busybox",
      command: "/bin/sh",
      tty: true
    )
    |> K8s.Client.put_conn(conn)
    |> K8s.Client.stream_to(terminal_kino_pid)

  send_to_websocket
end

KinoK8s.KinoTerminal.open(connect_to_pod)
```

<!-- livebook:{"attrs":{"connection":{"conn_hash":100330371,"variable":"conn"},"connections":[{"conn_hash":100330371,"variable":"conn"}],"gvk":null,"namespace":null,"namespaces":null,"request_type":"get","request_types":["get","list","watch"],"resource":null,"resources":null,"result_type":null,"result_types":{"get":null,"list":["list","stream"],"watch":["stream"]},"result_variable":"result"},"chunks":null,"kind":"Elixir.KinoK8s.GetCell","livebook_object":"smart_cell"} -->

```elixir

```

<!-- livebook:{"attrs":{"connection":{"conn_hash":100330371,"variable":"conn"},"connections":[{"conn_hash":100330371,"variable":"conn"}],"gvk":null,"namespace":null,"namespaces":null,"request_type":"get","request_types":["get","list","watch"],"resource":null,"resources":null,"result_type":null,"result_types":{"get":null,"list":["list","stream"],"watch":["stream"]},"result_variable":"result2"},"chunks":null,"kind":"Elixir.KinoK8s.GetCell","livebook_object":"smart_cell"} -->

```elixir

```

<!-- livebook:{"attrs":{"body":"apiVersion: v1\nkind: Pod\nmetadata:\n  name: busybox\n  namespace: kino-k8s\nspec:\n  containers:\n  - image: busybox\n    command:\n      - sleep\n      - \"3600\"\n    imagePullPolicy: IfNotPresent\n    name: busybox\n  restartPolicy: Always","connection":{"conn_hash":100330371,"variable":"conn"},"connections":[{"conn_hash":100330371,"variable":"conn"}],"method":"apply","methods":["apply","create","update"],"result_variable":"applied_resource"},"chunks":null,"kind":"Elixir.KinoK8s.ApplyCell","livebook_object":"smart_cell"} -->

````elixir
import YamlElixir.Sigil

{:ok, applied_resource} =
  ~y"""
  apiVersion: v1
  kind: Pod
  metadata:
    name: busybox
    namespace: kino-k8s
  spec:
    containers:
    - image: busybox
      command:
        - sleep
        - "3600"
      imagePullPolicy: IfNotPresent
      name: busybox
    restartPolicy: Always
  """
  |> K8s.Client.apply()
  |> K8s.Client.put_conn(conn)
  |> K8s.Client.run()

Kino.Markdown.new("#### Applied Resource:

```yaml
#{Ymlr.document!(applied_resource)}
```
")
````

<!-- livebook:{"attrs":{"connect_to":"logs","connect_tos":["exec","logs"],"connection":{"conn_hash":100330371,"variable":"conn"},"connections":[{"conn_hash":100330371,"variable":"conn"}],"container":null,"containers":null,"namespace":"default","namespaces":["default","kino-k8s","kube-node-lease","kube-public","kube-system","local-path-storage"],"pod":null,"pods":[]},"chunks":null,"kind":"Elixir.KinoK8s.TerminalCell","livebook_object":"smart_cell"} -->

```elixir

```

```elixir

```
