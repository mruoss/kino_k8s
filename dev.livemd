# Kino_K8s Demo

```elixir
# Mix.install([{:kino_k8s, github: "mruoss/kino_k8s"}])
Mix.install([{:kino_k8s, path: "~/src/community/kino_k8s"}], force: true)
```

## Section

<!-- livebook:{"attrs":{"opts":{"context":"kind-kino-k8s","insecure_skip_tls_verify":true},"result_variable":"conn","source":"~/.kube/config","source_type":"file"},"chunks":null,"kind":"Elixir.KinoK8s.ConnectionCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, conn} =
  K8s.Conn.from_file("~/.kube/config",
    context: "kind-kino-k8s",
    insecure_skip_tls_verify: true
  )

conn
```

<!-- livebook:{"attrs":{"connect_to":"exec","connect_tos":["exec","logs"],"connection":{"conn_hash":99636626,"variable":"conn"},"connections":[{"conn_hash":99636626,"variable":"conn"}],"container":null,"containers":null,"namespace":"default","namespaces":["default","kube-node-lease","kube-public","kube-system","local-path-storage"],"pod":null,"pods":[]},"chunks":null,"kind":"Elixir.KinoK8s.TerminalCell","livebook_object":"smart_cell"} -->

```elixir

```

<!-- livebook:{"attrs":{"connection":{"conn_hash":99636626,"variable":"conn"},"connections":[{"conn_hash":99636626,"variable":"conn"}],"gvk":{"api_version":"v1","index":"v1configmaps","kind":"ConfigMap","name":"configmaps","namespaced":true},"namespace":"default","namespaces":["__ALL__","default","kube-node-lease","kube-public","kube-system","local-path-storage"],"request_type":"watch","request_types":["get","list","watch"],"resource":null,"resources":null,"result_type":"stream","result_types":{"get":null,"list":["list","stream"],"watch":["stream"]},"result_variable":"result"},"chunks":null,"kind":"Elixir.KinoK8s.GetCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, result} =
  K8s.Client.watch("v1", "configmaps", namespace: "default")
  |> K8s.Client.put_conn(conn)
  |> K8s.Client.stream()

Kino.Tree.new(result)
```

<!-- livebook:{"attrs":{"body":"kind: ConfigMap\napiVersion: v1\nmetadata:\n  name: kino-k8s-cm\n  namespace: default\ndata:\n  key: default\n","connection":{"conn_hash":99636626,"variable":"conn"},"connections":[{"conn_hash":99636626,"variable":"conn"}],"method":"create","methods":["apply","create","update"],"result_variable":"applied_resource"},"chunks":null,"kind":"Elixir.KinoK8s.ApplyCell","livebook_object":"smart_cell"} -->

````elixir
import YamlElixir.Sigil

{:ok, applied_resource} =
  ~y"""
  kind: ConfigMap
  apiVersion: v1
  metadata:
    name: kino-k8s-cm
    namespace: default
  data:
    key: default
  """
  |> K8s.Client.create()
  |> K8s.Client.put_conn(conn)
  |> K8s.Client.run()

Kino.Markdown.new("```yaml
#{Ymlr.document!(applied_resource)}
```
")
````
