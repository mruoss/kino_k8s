# Kino_K8s Demo

```elixir
Mix.install([
  {:kino_k8s, path: "/Users/mruoss/src/community/kino_k8s"}
])
```

## Section

<!-- livebook:{"attrs":{"mix_env":"dev","opts":{"context":"kind-kompost-test","insecure_skip_tls_verify":true},"result_variable":"conn","running_on_k8s":false,"source":"~/.kube/config","source_type":"file"},"chunks":null,"kind":"Elixir.KinoK8s.ConnectionCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, conn} =
  K8s.Conn.from_file("~/.kube/config",
    context: "kind-kompost-test",
    insecure_skip_tls_verify: true
  )
```

<!-- livebook:{"attrs":{"connection":{"conn_hash":48541884,"variable":"conn"},"connections":[{"conn_hash":48541884,"variable":"conn"}],"gvk":{"api_version":"v1","index":"v1configmaps","kind":"ConfigMap","name":"configmaps","namespaced":true},"mix_env":"dev","namespace":"__ALL__","namespaces":["__ALL__","default","kino-k8s","kompost","kube-node-lease","kube-public","kube-system","local-path-storage","pgcinst-controller-integration","pginst-controller-integration","postgres","postgres-database-controller-integration","temporal","temporal-api-server-controller-integration","temporal-namespace-controller-integration"],"result_type":"list","result_types":["list","stream"],"result_variable":"result"},"chunks":null,"kind":"Elixir.KinoK8s.ListCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, result} =
  K8s.Client.list("v1", "configmaps", namespace: :all)
  |> K8s.Client.put_conn(conn)
  |> K8s.Client.run()

result
```

```elixir
# result |> Stream.map(&IO.puts(&1["metadata"]["name"])) |> Stream.run()
result["items"] |> Enum.map(& &1["metadata"]["name"])
```

<!-- livebook:{"attrs":{"body":"kind: ConfigMap\napiVersion: v1\nmetadata:\n  name: kino-k8s-cm\n  namespace: kino-k8s\ndata:\n  key: default\n","connection":{"conn_hash":48541884,"variable":"conn"},"connections":[{"conn_hash":48541884,"variable":"conn"}],"method":"apply","methods":["apply","create","update"],"result_variable":"applied_resource"},"chunks":null,"kind":"Elixir.KinoK8s.ApplyCell","livebook_object":"smart_cell"} -->

```elixir
import YamlElixir.Sigil

{:ok, applied_resource} =
  ~y"""
  kind: ConfigMap
  apiVersion: v1
  metadata:
    name: kino-k8s-cm
    namespace: kino-k8s
  data:
    key: default
  """
  |> K8s.Client.apply()
  |> K8s.Client.put_conn(conn)
  |> K8s.Client.run()

applied_resource |> Ymlr.document!() |> IO.puts()
```

<!-- livebook:{"attrs":{"connection":{"conn_hash":48541884,"variable":"conn"},"connections":[{"conn_hash":48541884,"variable":"conn"}],"gvk":{"api_version":"rbac.authorization.k8s.io/v1","index":"rbac.authorization.k8s.iov1clusterroles","kind":"ClusterRole","name":"clusterroles","namespaced":false},"mix_env":"dev","namespace":null,"namespaces":null,"resource":"admin","resources":["admin","cluster-admin","edit","kindnet","kompost","kubeadm:get-nodes","local-path-provisioner-role","system:aggregate-to-admin","system:aggregate-to-edit","system:aggregate-to-view","system:auth-delegator","system:basic-user","system:certificates.k8s.io:certificatesigningrequests:nodeclient","system:certificates.k8s.io:certificatesigningrequests:selfnodeclient","system:certificates.k8s.io:kube-apiserver-client-approver","system:certificates.k8s.io:kube-apiserver-client-kubelet-approver","system:certificates.k8s.io:kubelet-serving-approver","system:certificates.k8s.io:legacy-unknown-approver","system:controller:attachdetach-controller","system:controller:certificate-controller","system:controller:clusterrole-aggregation-controller","system:controller:cronjob-controller","system:controller:daemon-set-controller","system:controller:deployment-controller","system:controller:disruption-controller","system:controller:endpoint-controller","system:controller:endpointslice-controller","system:controller:endpointslicemirroring-controller","system:controller:ephemeral-volume-controller","system:controller:expand-controller","system:controller:generic-garbage-collector","system:controller:horizontal-pod-autoscaler","system:controller:job-controller","system:controller:namespace-controller","system:controller:node-controller","system:controller:persistent-volume-binder","system:controller:pod-garbage-collector","system:controller:pv-protection-controller","system:controller:pvc-protection-controller","system:controller:replicaset-controller","system:controller:replication-controller","system:controller:resourcequota-controller","system:controller:root-ca-cert-publisher","system:controller:route-controller","system:controller:service-account-controller","system:controller:service-controller","system:controller:statefulset-controller","system:controller:ttl-after-finished-controller","system:controller:ttl-controller","system:coredns","system:discovery","system:heapster","system:kube-aggregator","system:kube-controller-manager","system:kube-dns","system:kube-scheduler","system:kubelet-api-admin","system:monitoring","system:node","system:node-bootstrapper","system:node-problem-detector","system:node-proxier","system:persistent-volume-provisioner","system:public-info-viewer","system:service-account-issuer-discovery","system:volume-scheduler","view"],"result_variable":"resource"},"chunks":null,"kind":"Elixir.KinoK8s.GETCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, resource} =
  K8s.Client.get("rbac.authorization.k8s.io/v1", "clusterroles", name: "admin")
  |> K8s.Client.put_conn(conn)
  |> K8s.Client.run()

resource |> Ymlr.document!() |> IO.puts()
```
