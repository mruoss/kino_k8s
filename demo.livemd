# Kino_K8s Demo

```elixir
Mix.install([
  {:kino_k8s, path: "/Users/mruoss/src/community/kino_k8s"}
])
```

## Section

<!-- livebook:{"attrs":{"mix_env":"dev","opts":{"context":"kind-kompost-test","insecure_skip_tls_verify":true},"result_variable":"conn","running_on_k8s":false,"source":"~/.kube/config","source_type":"file"},"chunks":null,"kind":"Elixir.KinoK8s.ConnectionCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, conn} =
  K8s.Conn.from_file("~/.kube/config",
    context: "kind-kompost-test",
    insecure_skip_tls_verify: true
  )
```

<!-- livebook:{"attrs":{"body":"kind: ConfigMap\napiVersion: v1\nmetadata:\n  name: kino-k8s-cm\n  namespace: kino-k8s\ndata:\n  key: default\n","connection":{"conn_hash":48541884,"variable":"conn"},"connections":[{"conn_hash":48541884,"variable":"conn"}],"method":"apply","methods":["apply","create","update"],"result_variable":"applied_resource"},"chunks":null,"kind":"Elixir.KinoK8s.ApplyCell","livebook_object":"smart_cell"} -->

```elixir
import YamlElixir.Sigil

{:ok, applied_resource} =
  ~y"""
  kind: ConfigMap
  apiVersion: v1
  metadata:
    name: kino-k8s-cm
    namespace: kino-k8s
  data:
    key: default
  """
  |> K8s.Client.apply()
  |> K8s.Client.put_conn(conn)
  |> K8s.Client.run()

applied_resource |> Ymlr.document!() |> IO.puts()
```

<!-- livebook:{"attrs":{"connection":{"conn_hash":48541884,"variable":"conn"},"connections":[{"conn_hash":48541884,"variable":"conn"}],"gvk":null,"mix_env":"dev","namespace":null,"namespaces":null,"resource":null,"resources":null,"result_variable":"resource"},"chunks":null,"kind":"Elixir.KinoK8s.GETCell","livebook_object":"smart_cell"} -->

```elixir
nil
```


