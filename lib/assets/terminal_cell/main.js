var x=Object.create;var m=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var C=Object.getPrototypeOf,T=Object.prototype.hasOwnProperty;var S=(e,r)=>()=>(r||e((r={exports:{}}).exports,r),r.exports);var N=(e,r,t,a)=>{if(r&&typeof r=="object"||typeof r=="function")for(let o of A(r))!T.call(e,o)&&o!==t&&m(e,o,{get:()=>r[o],enumerable:!(a=y(r,o))||a.enumerable});return e};var j=(e,r,t)=>(t=e!=null?x(C(e)):{},N(r||!e||!e.__esModule?m(t,"default",{value:e,enumerable:!0}):t,e));var g=S((J,c)=>{(function(){"use strict";var e={}.hasOwnProperty,r="[native code]";function t(){for(var a=[],o=0;o<arguments.length;o++){var n=arguments[o];if(n){var s=typeof n;if(s==="string"||s==="number")a.push(n);else if(Array.isArray(n)){if(n.length){var i=t.apply(null,n);i&&a.push(i)}}else if(s==="object"){if(n.toString!==Object.prototype.toString&&!n.toString.toString().includes("[native code]")){a.push(n.toString());continue}for(var d in n)e.call(n,d)&&n[d]&&a.push(d)}}}return a.join(" ")}typeof c<"u"&&c.exports?(t.default=t,c.exports=t):typeof define=="function"&&typeof define.amd=="object"&&define.amd?define("classnames",[],function(){return t}):window.classNames=t})()});var w=({message:e})=>React.createElement(React.Fragment,null,React.createElement("div",{className:"flex rounded-md border border-dashed border-red-700 bg-red-100 p-2"},React.createElement("svg",{className:"h-6 w-6 flex-none text-red-700",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor","aria-hidden":"true"},React.createElement("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z"})),React.createElement("div",{className:"font-inter px-2 text-sm font-medium text-red-700"},e))),u=w;var f=async e=>{await e.importJS("https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.development.js"),await e.importJS("https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.development.js")};var P=(e,r)=>{let[t,a]=React.useState(r),o=n=>s=>{a(i=>({...i,[n]:s})),console.log("Pushing ${attrName} to server",s),e.pushEvent(`update_${n}`,s)};return React.useEffect(()=>{e.handleEvent("update",n=>{console.log("Attribute update from server",n),a(s=>({...Object.assign(s,n)}))})},[]),[t,o]},b=P;var O=()=>React.createElement("div",{className:"mb-5 rounded-md bg-gray-100 p-4 font-inter text-sm font-medium text-gray-500"},React.createElement("p",null,"To make requests to the Kubernetes cluster, you need at least one connection to a cluster."),React.createElement("p",{className:"pt-1"},"To create a cluster connection, you can add the"," ",React.createElement("span",{className:"text-gray-600"},"Cluster Connection")," smart cell.")),v=O;var p=j(g()),K=({name:e,label:r,options:t,selectedOption:a,onChange:o,className:n="",orientation:s="vert"})=>React.createElement("div",{className:(0,p.default)({"flex flex-row items-baseline":s=="horiz"},n)},React.createElement("label",{htmlFor:e,className:(0,p.default)({block:s=="vert","pr-1 uppercase":s=="horiz"},"mb-1 text-sm font-medium")},r),React.createElement("select",{id:e,value:a||void 0,onChange:i=>o(i.target.value),className:(0,p.default)({"block w-full":s=="vert"}," bg-caret-down appearance-none rounded-lg border border-gray-300 bg-gray-50 bg-[length:10px] bg-[center_right_10px] bg-no-repeat p-2 pr-5 text-sm focus:border-blue-500 focus:ring-blue-500")},t.map(i=>React.createElement("option",{key:i.value,value:i.value},i.label)))),l=K;var E=({initialAttrs:e,ctx:r})=>{let[t,a]=b(r,e);return React.createElement(React.Fragment,null,!t.connection&&React.createElement(v,null),React.createElement("div",{className:"rounded-md border border-solid border-gray-300 font-inter font-medium text-gray-600"},React.createElement("div",{className:"border-b-solid flex gap-x-5 gap-y-3 border-b border-b-gray-300 bg-blue-100 p-3"},React.createElement(l,{name:"connection",label:"Connection",options:t.connections.map(o=>({label:o.variable,value:o.variable})),selectedOption:t.connection?.variable?.toString(),onChange:a("connection"),orientation:"horiz"}),React.createElement(l,{name:"connect_to",label:"connect_to",options:t.connect_tos.map(o=>({label:o,value:o})),selectedOption:t.connect_to?.toString(),onChange:a("connect_to"),orientation:"horiz"})),React.createElement("div",{className:"flex gap-x-5 p-3"},t.namespaces&&React.createElement(l,{name:"namespace",label:"Namespace",options:t.namespaces.map(o=>({label:o,value:o})),selectedOption:t.namespace,onChange:a("namespace")}),t.pods&&React.createElement(l,{name:"pod",label:"Pod Name",options:t.pods.map(o=>({label:o,value:o})),selectedOption:t.pod,onChange:a("pod")}),t.containers&&React.createElement(l,{name:"container",label:"Container Name",options:t.containers.map(o=>({label:o,value:o})),selectedOption:t.container,onChange:a("container")}))))},h=E;var G=async(e,r)=>{await f(e,r),e.root.innerHTML="loading...",e.importCSS("main.css"),e.importCSS("https://fonts.googleapis.com/css2?family=Inter:wght@400;500&display=swap");let t=ReactDOM.createRoot(e.root);if(r.error)return t.render(React.createElement(u,{message:r.error}));t.render(React.createElement(h,{initialAttrs:r,ctx:e}))};export{G as init};
/*! Bundled license information:

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)
*/
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMiLCAiLi4vLi4vLi4vYXNzZXRzL3NoYXJlZC9lcnJvci50c3giLCAiLi4vLi4vLi4vYXNzZXRzL3NoYXJlZC91dGlscy50cyIsICIuLi8uLi8uLi9hc3NldHMvc2hhcmVkL2F0dHJfc3RhdGUudHN4IiwgIi4uLy4uLy4uL2Fzc2V0cy9zaGFyZWQvY29ubl9ub3RpY2UudHN4IiwgIi4uLy4uLy4uL2Fzc2V0cy9zaGFyZWQvZm9ybS9zZWxlY3QudHN4IiwgIi4uLy4uLy4uL2Fzc2V0cy90ZXJtaW5hbF9jZWxsL2FwcC50c3giLCAiLi4vLi4vLi4vYXNzZXRzL3Rlcm1pbmFsX2NlbGwvbWFpbi50c3giXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8qIVxuXHRDb3B5cmlnaHQgKGMpIDIwMTggSmVkIFdhdHNvbi5cblx0TGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcblx0aHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblx0dmFyIG5hdGl2ZUNvZGVTdHJpbmcgPSAnW25hdGl2ZSBjb2RlXSc7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcygpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcblx0XHRcdFx0aWYgKGFyZy5sZW5ndGgpIHtcblx0XHRcdFx0XHR2YXIgaW5uZXIgPSBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0XHRcdFx0aWYgKGlubmVyKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goaW5uZXIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRpZiAoYXJnLnRvU3RyaW5nICE9PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nICYmICFhcmcudG9TdHJpbmcudG9TdHJpbmcoKS5pbmNsdWRlcygnW25hdGl2ZSBjb2RlXScpKSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZy50b1N0cmluZygpKTtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRjbGFzc05hbWVzLmRlZmF1bHQgPSBjbGFzc05hbWVzO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCAiaW50ZXJmYWNlIEVycm9yUHJvcHMge1xuICBtZXNzYWdlOiBzdHJpbmdcbn1cbmNvbnN0IEVycm9yID0gKHsgbWVzc2FnZSB9OiBFcnJvclByb3BzKSA9PiAoXG4gIDw+XG4gICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IHJvdW5kZWQtbWQgYm9yZGVyIGJvcmRlci1kYXNoZWQgYm9yZGVyLXJlZC03MDAgYmctcmVkLTEwMCBwLTJcIj5cbiAgICAgIDxzdmdcbiAgICAgICAgY2xhc3NOYW1lPVwiaC02IHctNiBmbGV4LW5vbmUgdGV4dC1yZWQtNzAwXCJcbiAgICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgICAgICAgc3Ryb2tlLXdpZHRoPVwiMS41XCJcbiAgICAgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICAgID5cbiAgICAgICAgPHBhdGhcbiAgICAgICAgICBzdHJva2UtbGluZWNhcD1cInJvdW5kXCJcbiAgICAgICAgICBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiXG4gICAgICAgICAgZD1cIk0xMiA5djMuNzVtLTkuMzAzIDMuMzc2Yy0uODY2IDEuNS4yMTcgMy4zNzQgMS45NDggMy4zNzRoMTQuNzFjMS43MyAwIDIuODEzLTEuODc0IDEuOTQ4LTMuMzc0TDEzLjk0OSAzLjM3OGMtLjg2Ni0xLjUtMy4wMzItMS41LTMuODk4IDBMMi42OTcgMTYuMTI2ek0xMiAxNS43NWguMDA3di4wMDhIMTJ2LS4wMDh6XCJcbiAgICAgICAgPjwvcGF0aD5cbiAgICAgIDwvc3ZnPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb250LWludGVyIHB4LTIgdGV4dC1zbSBmb250LW1lZGl1bSB0ZXh0LXJlZC03MDBcIj5cbiAgICAgICAge21lc3NhZ2V9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC8+XG4pXG5cbmV4cG9ydCBkZWZhdWx0IEVycm9yXG4iLCAiaW1wb3J0IHsgS2lub0NvbnRleHQgfSBmcm9tICcuLi9raW5vJ1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5leHBvcnQgY29uc3QgZGVib3VuY2UgPSA8VCBleHRlbmRzICguLi5hcmdzOiBhbnlbXSkgPT4gUmV0dXJuVHlwZTxUPj4oXG4gIGNhbGxiYWNrOiBULFxuICB0aW1lb3V0OiBudW1iZXIsXG4pOiAoKC4uLmFyZ3M6IFBhcmFtZXRlcnM8VD4pID0+IHZvaWQpID0+IHtcbiAgbGV0IHRpbWVyOiBSZXR1cm5UeXBlPHR5cGVvZiBzZXRUaW1lb3V0PlxuXG4gIHJldHVybiAoLi4uYXJnczogUGFyYW1ldGVyczxUPikgPT4ge1xuICAgIGNsZWFyVGltZW91dCh0aW1lcilcbiAgICB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY2FsbGJhY2soLi4uYXJncylcbiAgICB9LCB0aW1lb3V0KVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBsb2FkUmVhY3QgPSBhc3luYyAoY3R4OiBLaW5vQ29udGV4dCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICBpZiAoREVCVUcpIHtcbiAgICBhd2FpdCBjdHguaW1wb3J0SlMoXG4gICAgICAnaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvcmVhY3QvMTguMi4wL3VtZC9yZWFjdC5kZXZlbG9wbWVudC5qcycsXG4gICAgKVxuICAgIGF3YWl0IGN0eC5pbXBvcnRKUyhcbiAgICAgICdodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9yZWFjdC1kb20vMTguMi4wL3VtZC9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnLFxuICAgIClcbiAgfSBlbHNlIHtcbiAgICBhd2FpdCBjdHguaW1wb3J0SlMoXG4gICAgICAnaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvcmVhY3QvMTguMi4wL3VtZC9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycsXG4gICAgKVxuICAgIGF3YWl0IGN0eC5pbXBvcnRKUyhcbiAgICAgICdodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9yZWFjdC1kb20vMTguMi4wL3VtZC9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnLFxuICAgIClcbiAgfVxufVxuIiwgImltcG9ydCB7IEtpbm9Db250ZXh0IH0gZnJvbSAnLi4va2lubydcblxudHlwZSBVcGRhdGVBdHRyRnVuPEF0dHJzVHlwZT4gPSAoXG4gIGF0dHJOYW1lOiBzdHJpbmcsXG4pID0+IChBdHRyVmFsdWU6IEF0dHJzVHlwZVtrZXlvZiBBdHRyc1R5cGVdKSA9PiB2b2lkXG5cbmNvbnN0IHVzZUF0dHJzU3RhdGUgPSA8QXR0cnNUeXBlIGV4dGVuZHMgb2JqZWN0PihcbiAgY3R4OiBLaW5vQ29udGV4dCxcbiAgaW5pdGlhbEF0dHJzOiBBdHRyc1R5cGUsXG4pOiBbQXR0cnNUeXBlLCBVcGRhdGVBdHRyRnVuPEF0dHJzVHlwZT5dID0+IHtcbiAgY29uc3QgW2F0dHJzLCBzZXRBdHRyc10gPSBSZWFjdC51c2VTdGF0ZTxBdHRyc1R5cGU+KGluaXRpYWxBdHRycylcbiAgY29uc3QgdXBkYXRlQXR0cjogVXBkYXRlQXR0ckZ1bjxBdHRyc1R5cGU+ID0gKGF0dHJOYW1lKSA9PiAoYXR0clZhbHVlKSA9PiB7XG4gICAgc2V0QXR0cnMoKGF0dHJzKSA9PiAoeyAuLi5hdHRycywgW2F0dHJOYW1lXTogYXR0clZhbHVlIH0pKVxuICAgIGNvbnNvbGUubG9nKCdQdXNoaW5nICR7YXR0ck5hbWV9IHRvIHNlcnZlcicsIGF0dHJWYWx1ZSlcbiAgICBjdHgucHVzaEV2ZW50KGB1cGRhdGVfJHthdHRyTmFtZX1gLCBhdHRyVmFsdWUpXG4gIH1cblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGN0eC5oYW5kbGVFdmVudDxBdHRyc1R5cGU+KCd1cGRhdGUnLCAodXBkYXRlcykgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ0F0dHJpYnV0ZSB1cGRhdGUgZnJvbSBzZXJ2ZXInLCB1cGRhdGVzKVxuICAgICAgc2V0QXR0cnMoKGF0dHJzKSA9PiAoe1xuICAgICAgICAuLi5PYmplY3QuYXNzaWduKGF0dHJzLCB1cGRhdGVzKSxcbiAgICAgIH0pKVxuICAgIH0pXG4gIH0sIFtdKVxuICByZXR1cm4gW2F0dHJzLCB1cGRhdGVBdHRyXVxufVxuXG5leHBvcnQgZGVmYXVsdCB1c2VBdHRyc1N0YXRlXG4iLCAiY29uc3QgQ29ubk5vdGljZSA9ICgpID0+IChcbiAgPGRpdiBjbGFzc05hbWU9XCJtYi01IHJvdW5kZWQtbWQgYmctZ3JheS0xMDAgcC00IGZvbnQtaW50ZXIgdGV4dC1zbSBmb250LW1lZGl1bSB0ZXh0LWdyYXktNTAwXCI+XG4gICAgPHA+XG4gICAgICBUbyBtYWtlIHJlcXVlc3RzIHRvIHRoZSBLdWJlcm5ldGVzIGNsdXN0ZXIsIHlvdSBuZWVkIGF0IGxlYXN0IG9uZVxuICAgICAgY29ubmVjdGlvbiB0byBhIGNsdXN0ZXIuXG4gICAgPC9wPlxuICAgIDxwIGNsYXNzTmFtZT1cInB0LTFcIj5cbiAgICAgIFRvIGNyZWF0ZSBhIGNsdXN0ZXIgY29ubmVjdGlvbiwgeW91IGNhbiBhZGQgdGhleycgJ31cbiAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtZ3JheS02MDBcIj5DbHVzdGVyIENvbm5lY3Rpb248L3NwYW4+IHNtYXJ0IGNlbGwuXG4gICAgPC9wPlxuICA8L2Rpdj5cbilcblxuZXhwb3J0IGRlZmF1bHQgQ29ubk5vdGljZVxuIiwgImltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnXG5cbnR5cGUgU2VsZWN0UHJvcHMgPSB7XG4gIG5hbWU6IHN0cmluZ1xuICBsYWJlbDogc3RyaW5nXG4gIG9wdGlvbnM6IHsgdmFsdWU6IHN0cmluZzsgbGFiZWw6IHN0cmluZyB9W11cbiAgc2VsZWN0ZWRPcHRpb24/OiBzdHJpbmdcbiAgb25DaGFuZ2U6IChvcHRpb246IHN0cmluZykgPT4gdm9pZFxuICBjbGFzc05hbWU/OiBzdHJpbmdcbiAgb3JpZW50YXRpb24/OiAnaG9yaXonIHwgJ3ZlcnQnXG59XG5cbmNvbnN0IFNlbGVjdCA9ICh7XG4gIG5hbWUsXG4gIGxhYmVsLFxuICBvcHRpb25zLFxuICBzZWxlY3RlZE9wdGlvbixcbiAgb25DaGFuZ2UsXG4gIGNsYXNzTmFtZSA9ICcnLFxuICBvcmllbnRhdGlvbiA9ICd2ZXJ0Jyxcbn06IFNlbGVjdFByb3BzKSA9PiAoXG4gIDxkaXZcbiAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoXG4gICAgICB7XG4gICAgICAgICdmbGV4IGZsZXgtcm93IGl0ZW1zLWJhc2VsaW5lJzogb3JpZW50YXRpb24gPT0gJ2hvcml6JyxcbiAgICAgIH0sXG4gICAgICBjbGFzc05hbWUsXG4gICAgKX1cbiAgPlxuICAgIDxsYWJlbFxuICAgICAgaHRtbEZvcj17bmFtZX1cbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrOiBvcmllbnRhdGlvbiA9PSAndmVydCcsXG4gICAgICAgICAgJ3ByLTEgdXBwZXJjYXNlJzogb3JpZW50YXRpb24gPT0gJ2hvcml6JyxcbiAgICAgICAgfSxcbiAgICAgICAgJ21iLTEgdGV4dC1zbSBmb250LW1lZGl1bScsXG4gICAgICApfVxuICAgID5cbiAgICAgIHtsYWJlbH1cbiAgICA8L2xhYmVsPlxuICAgIDxzZWxlY3RcbiAgICAgIGlkPXtuYW1lfVxuICAgICAgdmFsdWU9e3NlbGVjdGVkT3B0aW9uIHx8IHVuZGVmaW5lZH1cbiAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gb25DaGFuZ2UoZSEudGFyZ2V0IS52YWx1ZSl9XG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoXG4gICAgICAgIHsgJ2Jsb2NrIHctZnVsbCc6IG9yaWVudGF0aW9uID09ICd2ZXJ0JyB9LFxuICAgICAgICAnIGJnLWNhcmV0LWRvd24gYXBwZWFyYW5jZS1ub25lIHJvdW5kZWQtbGcgYm9yZGVyIGJvcmRlci1ncmF5LTMwMCBiZy1ncmF5LTUwIGJnLVtsZW5ndGg6MTBweF0gYmctW2NlbnRlcl9yaWdodF8xMHB4XSBiZy1uby1yZXBlYXQgcC0yIHByLTUgdGV4dC1zbSBmb2N1czpib3JkZXItYmx1ZS01MDAgZm9jdXM6cmluZy1ibHVlLTUwMCcsXG4gICAgICApfVxuICAgID5cbiAgICAgIHtvcHRpb25zLm1hcCgob3B0aW9uKSA9PiAoXG4gICAgICAgIDxvcHRpb24ga2V5PXtvcHRpb24udmFsdWV9IHZhbHVlPXtvcHRpb24udmFsdWV9PlxuICAgICAgICAgIHtvcHRpb24ubGFiZWx9XG4gICAgICAgIDwvb3B0aW9uPlxuICAgICAgKSl9XG4gICAgPC9zZWxlY3Q+XG4gIDwvZGl2PlxuKVxuXG5leHBvcnQgZGVmYXVsdCBTZWxlY3RcbiIsICJpbXBvcnQgeyBLaW5vQ29udGV4dCB9IGZyb20gJy4uL2tpbm8nXG5pbXBvcnQgdXNlQXR0cnNTdGF0ZSBmcm9tICcuLi9zaGFyZWQvYXR0cl9zdGF0ZSdcbmltcG9ydCBDb25uTm90aWNlIGZyb20gJy4uL3NoYXJlZC9jb25uX25vdGljZSdcbmltcG9ydCBTZWxlY3QgZnJvbSAnLi4vc2hhcmVkL2Zvcm0vc2VsZWN0J1xuaW1wb3J0IHsgVGVybWluYWxDZWxsQXR0cnMgfSBmcm9tICcuL3R5cGVzJ1xuXG5pbnRlcmZhY2UgQXBwUHJvcHMge1xuICBpbml0aWFsQXR0cnM6IFRlcm1pbmFsQ2VsbEF0dHJzXG4gIGN0eDogS2lub0NvbnRleHRcbn1cblxuY29uc3QgQXBwID0gKHsgaW5pdGlhbEF0dHJzLCBjdHggfTogQXBwUHJvcHMpID0+IHtcbiAgY29uc3QgW2F0dHJzLCB1cGRhdGVBdHRyXSA9IHVzZUF0dHJzU3RhdGUoY3R4LCBpbml0aWFsQXR0cnMpXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHshYXR0cnMuY29ubmVjdGlvbiAmJiA8Q29ubk5vdGljZSAvPn1cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm91bmRlZC1tZCBib3JkZXIgYm9yZGVyLXNvbGlkIGJvcmRlci1ncmF5LTMwMCBmb250LWludGVyIGZvbnQtbWVkaXVtIHRleHQtZ3JheS02MDBcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJib3JkZXItYi1zb2xpZCBmbGV4IGdhcC14LTUgZ2FwLXktMyBib3JkZXItYiBib3JkZXItYi1ncmF5LTMwMCBiZy1ibHVlLTEwMCBwLTNcIj5cbiAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICBuYW1lPVwiY29ubmVjdGlvblwiXG4gICAgICAgICAgICBsYWJlbD1cIkNvbm5lY3Rpb25cIlxuICAgICAgICAgICAgb3B0aW9ucz17YXR0cnMuY29ubmVjdGlvbnMubWFwKChjb25uZWN0aW9uKSA9PiAoe1xuICAgICAgICAgICAgICBsYWJlbDogY29ubmVjdGlvbi52YXJpYWJsZSxcbiAgICAgICAgICAgICAgdmFsdWU6IGNvbm5lY3Rpb24udmFyaWFibGUsXG4gICAgICAgICAgICB9KSl9XG4gICAgICAgICAgICBzZWxlY3RlZE9wdGlvbj17YXR0cnMuY29ubmVjdGlvbj8udmFyaWFibGU/LnRvU3RyaW5nKCl9XG4gICAgICAgICAgICBvbkNoYW5nZT17dXBkYXRlQXR0cignY29ubmVjdGlvbicpfVxuICAgICAgICAgICAgb3JpZW50YXRpb249XCJob3JpelwiXG4gICAgICAgICAgLz5cbiAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICBuYW1lPVwiY29ubmVjdF90b1wiXG4gICAgICAgICAgICBsYWJlbD1cImNvbm5lY3RfdG9cIlxuICAgICAgICAgICAgb3B0aW9ucz17YXR0cnMuY29ubmVjdF90b3MubWFwKChjb25uZWN0X3RvKSA9PiAoe1xuICAgICAgICAgICAgICBsYWJlbDogY29ubmVjdF90byxcbiAgICAgICAgICAgICAgdmFsdWU6IGNvbm5lY3RfdG8sXG4gICAgICAgICAgICB9KSl9XG4gICAgICAgICAgICBzZWxlY3RlZE9wdGlvbj17YXR0cnMuY29ubmVjdF90bz8udG9TdHJpbmcoKX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXt1cGRhdGVBdHRyKCdjb25uZWN0X3RvJyl9XG4gICAgICAgICAgICBvcmllbnRhdGlvbj1cImhvcml6XCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGdhcC14LTUgcC0zXCI+XG4gICAgICAgICAge2F0dHJzWyduYW1lc3BhY2VzJ10gJiYgKFxuICAgICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgICBuYW1lPVwibmFtZXNwYWNlXCJcbiAgICAgICAgICAgICAgbGFiZWw9XCJOYW1lc3BhY2VcIlxuICAgICAgICAgICAgICBvcHRpb25zPXthdHRycy5uYW1lc3BhY2VzLm1hcCgobnMpID0+ICh7XG4gICAgICAgICAgICAgICAgbGFiZWw6IG5zLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBucyxcbiAgICAgICAgICAgICAgfSkpfVxuICAgICAgICAgICAgICBzZWxlY3RlZE9wdGlvbj17YXR0cnNbJ25hbWVzcGFjZSddfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17dXBkYXRlQXR0cignbmFtZXNwYWNlJyl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgICAge2F0dHJzLnBvZHMgJiYgKFxuICAgICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgICBuYW1lPVwicG9kXCJcbiAgICAgICAgICAgICAgbGFiZWw9XCJQb2QgTmFtZVwiXG4gICAgICAgICAgICAgIG9wdGlvbnM9e2F0dHJzLnBvZHMubWFwKChucykgPT4gKHtcbiAgICAgICAgICAgICAgICBsYWJlbDogbnMsXG4gICAgICAgICAgICAgICAgdmFsdWU6IG5zLFxuICAgICAgICAgICAgICB9KSl9XG4gICAgICAgICAgICAgIHNlbGVjdGVkT3B0aW9uPXthdHRyc1sncG9kJ119XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXt1cGRhdGVBdHRyKCdwb2QnKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgICB7YXR0cnMuY29udGFpbmVycyAmJiAoXG4gICAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICAgIG5hbWU9XCJjb250YWluZXJcIlxuICAgICAgICAgICAgICBsYWJlbD1cIkNvbnRhaW5lciBOYW1lXCJcbiAgICAgICAgICAgICAgb3B0aW9ucz17YXR0cnMuY29udGFpbmVycy5tYXAoKG5zKSA9PiAoe1xuICAgICAgICAgICAgICAgIGxhYmVsOiBucyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogbnMsXG4gICAgICAgICAgICAgIH0pKX1cbiAgICAgICAgICAgICAgc2VsZWN0ZWRPcHRpb249e2F0dHJzWydjb250YWluZXInXX1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e3VwZGF0ZUF0dHIoJ2NvbnRhaW5lcicpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFwcFxuIiwgImltcG9ydCB7IEtpbm9Db250ZXh0IH0gZnJvbSAnLi4va2lubydcbmltcG9ydCBFcnJvciBmcm9tICcuLi9zaGFyZWQvZXJyb3InXG5pbXBvcnQgeyBsb2FkUmVhY3QgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMnXG5pbXBvcnQgQXBwIGZyb20gJy4vYXBwJ1xuaW1wb3J0IHsgVGVybWluYWxDZWxsQXR0cnMgfSBmcm9tICcuL3R5cGVzJ1xuXG5leHBvcnQgY29uc3QgaW5pdCA9IGFzeW5jIChcbiAgY3R4OiBLaW5vQ29udGV4dCxcbiAgYXR0cnM6IFRlcm1pbmFsQ2VsbEF0dHJzLFxuKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGF3YWl0IGxvYWRSZWFjdChjdHgsIGF0dHJzKVxuXG4gIGN0eC5yb290LmlubmVySFRNTCA9ICdsb2FkaW5nLi4uJ1xuXG4gIGN0eC5pbXBvcnRDU1MoJ21haW4uY3NzJylcbiAgY3R4LmltcG9ydENTUyhcbiAgICAnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1JbnRlcjp3Z2h0QDQwMDs1MDAmZGlzcGxheT1zd2FwJyxcbiAgKVxuXG4gIGNvbnN0IHJvb3QgPSBSZWFjdERPTS5jcmVhdGVSb290KGN0eC5yb290KVxuICBpZiAoYXR0cnMuZXJyb3IpIHtcbiAgICByZXR1cm4gcm9vdC5yZW5kZXIoPEVycm9yIG1lc3NhZ2U9e2F0dHJzLmVycm9yfSAvPilcbiAgfVxuXG4gIHJvb3QucmVuZGVyKDxBcHAgaW5pdGlhbEF0dHJzPXthdHRyc30gY3R4PXtjdHh9IC8+KVxufVxuIl0sCiAgIm1hcHBpbmdzIjogInlnQkFBQSxJQUFBQSxFQUFBQyxFQUFBLENBQUFDLEVBQUFDLElBQUEsRUFPQyxVQUFZLENBQ1osYUFFQSxJQUFJQyxFQUFTLENBQUMsRUFBRSxlQUNaQyxFQUFtQixnQkFFdkIsU0FBU0MsR0FBYSxDQUdyQixRQUZJQyxFQUFVLENBQUMsRUFFTkMsRUFBSSxFQUFHQSxFQUFJLFVBQVUsT0FBUUEsSUFBSyxDQUMxQyxJQUFJQyxFQUFNLFVBQVVELENBQUMsRUFDckIsR0FBS0MsRUFFTCxLQUFJQyxFQUFVLE9BQU9ELEVBRXJCLEdBQUlDLElBQVksVUFBWUEsSUFBWSxTQUN2Q0gsRUFBUSxLQUFLRSxDQUFHLFVBQ04sTUFBTSxRQUFRQSxDQUFHLEdBQzNCLEdBQUlBLEVBQUksT0FBUSxDQUNmLElBQUlFLEVBQVFMLEVBQVcsTUFBTSxLQUFNRyxDQUFHLEVBQ2xDRSxHQUNISixFQUFRLEtBQUtJLENBQUssQ0FFcEIsVUFDVUQsSUFBWSxTQUFVLENBQ2hDLEdBQUlELEVBQUksV0FBYSxPQUFPLFVBQVUsVUFBWSxDQUFDQSxFQUFJLFNBQVMsU0FBUyxFQUFFLFNB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LE1BQU9BLENBQ1QsRUFBRSxFQUNGLGVBQWdCUCxFQUFNLElBQ3RCLFNBQVVDLEVBQVcsS0FBSyxFQUM1QixFQUVERCxFQUFNLFlBQ0wsb0JBQUNJLEVBQUEsQ0FDQyxLQUFLLFlBQ0wsTUFBTSxpQkFDTixRQUFTSixFQUFNLFdBQVcsSUFBS08sSUFBUSxDQUNyQyxNQUFPQSxFQUNQLE1BQU9BLENBQ1QsRUFBRSxFQUNGLGVBQWdCUCxFQUFNLFVBQ3RCLFNBQVVDLEVBQVcsV0FBVyxFQUNsQyxDQUVKLENBQ0YsQ0FDRixDQUVKLEVBRU9PLEVBQVFYLEVDOUVSLElBQU1ZLEVBQU8sTUFDbEJDLEVBQ0FDLElBQ2tCLENBQ2xCLE1BQU1DLEVBQVVGLEVBQUtDLENBQUssRUFFMUJELEVBQUksS0FBSyxVQUFZLGFBRXJCQSxFQUFJLFVBQVUsVUFBVSxFQUN4QkEsRUFBSSxVQUNGLDBFQUNGLEVBRUEsSUFBTUcsRUFBTyxTQUFTLFdBQVdILEVBQUksSUFBSSxFQUN6QyxHQUFJQyxFQUFNLE1BQ1IsT0FBT0UsRUFBSyxPQUFPLG9CQUFDQyxFQUFBLENBQU0sUUFBU0gsRUFBTSxNQUFPLENBQUUsRUFHcERFLEVBQUssT0FBTyxvQkFBQ0UsRUFBQSxDQUFJLGFBQWNKLEVBQU8sSUFBS0QsRUFBSyxDQUFFLENBQ3BEIiwKICAibmFtZXMiOiBbInJlcXVpcmVfY2xhc3NuYW1lcyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImhhc093biIsICJuYXRpdmVDb2RlU3RyaW5nIiwgImNsYXNzTmFtZXMiLCAiY2xhc3NlcyIsICJpIiwgImFyZyIsICJhcmdUeXBlIiwgImlubmVyIiwgImtleSIsICJFcnJvciIsICJtZXNzYWdlIiwgImVycm9yX2RlZmF1bHQiLCAibG9hZFJlYWN0IiwgImN0eCIsICJ1c2VBdHRyc1N0YXRlIiwgImN0eCIsICJpbml0aWFsQXR0cnMiLCAiYXR0cnMiLCAic2V0QXR0cnMiLCAidXBkYXRlQXR0ciIsICJhdHRyTmFtZSIsICJhdHRyVmFsdWUiLCAidXBkYXRlcyIsICJhdHRyX3N0YXRlX2RlZmF1bHQiLCAiQ29ubk5vdGljZSIsICJjb25uX25vdGljZV9kZWZhdWx0IiwgImltcG9ydF9jbGFzc25hbWVzIiwgIlNlbGVjdCIsICJuYW1lIiwgImxhYmVsIiwgIm9wdGlvbnMiLCAic2VsZWN0ZWRPcHRpb24iLCAib25DaGFuZ2UiLCAiY2xhc3NOYW1lIiwgIm9yaWVudGF0aW9uIiwgImNsYXNzTmFtZXMiLCAiZSIsICJvcHRpb24iLCAic2VsZWN0X2RlZmF1bHQiLCAiQXBwIiwgImluaXRpYWxBdHRycyIsICJjdHgiLCAiYXR0cnMiLCAidXBkYXRlQXR0ciIsICJhdHRyX3N0YXRlX2RlZmF1bHQiLCAiY29ubl9ub3RpY2VfZGVmYXVsdCIsICJzZWxlY3RfZGVmYXVsdCIsICJjb25uZWN0aW9uIiwgImNvbm5lY3RfdG8iLCAibnMiLCAiYXBwX2RlZmF1bHQiLCAiaW5pdCIsICJjdHgiLCAiYXR0cnMiLCAibG9hZFJlYWN0IiwgInJvb3QiLCAiZXJyb3JfZGVmYXVsdCIsICJhcHBfZGVmYXVsdCJdCn0K
