var R=Object.create;var f=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var P=Object.getOwnPropertyNames;var j=Object.getPrototypeOf,K=Object.prototype.hasOwnProperty;var _=(t,o)=>()=>(o||t((o={exports:{}}).exports,o),o.exports);var L=(t,o,e,s)=>{if(o&&typeof o=="object"||typeof o=="function")for(let a of P(o))!K.call(t,a)&&a!==e&&f(t,a,{get:()=>o[a],enumerable:!(s=I(o,a))||s.enumerable});return t};var b=(t,o,e)=>(e=t!=null?R(j(t)):{},L(o||!t||!t.__esModule?f(e,"default",{value:t,enumerable:!0}):e,t));var m=_((X,c)=>{(function(){"use strict";var t={}.hasOwnProperty,o="[native code]";function e(){for(var s=[],a=0;a<arguments.length;a++){var r=arguments[a];if(r){var n=typeof r;if(n==="string"||n==="number")s.push(r);else if(Array.isArray(r)){if(r.length){var l=e.apply(null,r);l&&s.push(l)}}else if(n==="object"){if(r.toString!==Object.prototype.toString&&!r.toString.toString().includes("[native code]")){s.push(r.toString());continue}for(var i in r)t.call(r,i)&&r[i]&&s.push(i)}}}return s.join(" ")}typeof c<"u"&&c.exports?(e.default=e,c.exports=e):typeof define=="function"&&typeof define.amd=="object"&&define.amd?define("classnames",[],function(){return e}):window.classNames=e})()});var z=({message:t})=>React.createElement(React.Fragment,null,React.createElement("div",{className:"flex rounded-md border border-dashed border-red-700 bg-red-100 p-2"},React.createElement("svg",{className:"h-6 w-6 flex-none text-red-700",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor","aria-hidden":"true"},React.createElement("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z"})),React.createElement("div",{className:"font-inter px-2 text-sm font-medium text-red-700"},t))),v=z;var g=(t,o)=>{let e;return(...s)=>{clearTimeout(e),e=setTimeout(()=>{t(...s)},o)}},h=async t=>{await t.importJS("https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.development.js"),await t.importJS("https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.development.js")};var O=(t,o)=>{let[e,s]=React.useState(o),a=r=>n=>{s(l=>({...l,[r]:n})),console.log("Pushing ${attrName} to server",n),t.pushEvent(`update_${r}`,n)};return React.useEffect(()=>{t.handleEvent("update",r=>{console.log("Attribute update from server",r),s(n=>({...Object.assign(n,r)}))})},[]),[e,a]},y=O;var E=()=>React.createElement("div",{className:"mb-5 rounded-md bg-gray-100 p-4 font-inter text-sm font-medium text-gray-500"},React.createElement("p",null,"To make requests to the Kubernetes cluster, you need at least one connection to a cluster."),React.createElement("p",{className:"pt-1"},"To create a cluster connection, you can add the"," ",React.createElement("span",{className:"text-gray-600"},"Cluster Connection")," smart cell.")),x=E;var d=b(m()),F=({name:t,label:o,defaultValue:e,onChange:s,orientation:a="vert"})=>React.createElement("div",{className:(0,d.default)({"flex flex-row items-baseline":a=="horiz"})},React.createElement("label",{htmlFor:t,className:(0,d.default)({block:a=="vert","pr-1 uppercase":a=="horiz"},"mb-1 text-sm font-medium")},o),React.createElement("input",{type:"text",value:e,name:t,onChange:r=>s(r.target.value),className:(0,d.default)({"block w-full":a=="vert"},"rounded-lg border border-gray-300 bg-gray-50 p-1.5 text-sm focus:border-blue-500 focus:ring-blue-500")})),S=F;var C=b(m());var G=({name:t,selectedValue:o,searchTerm:e,onSearch:s,placeholder:a})=>{let r=g(i=>{s(i.toLowerCase())},300),[n,l]=React.useState(e??"");return React.useEffect(()=>{o&&l(o)},[o]),React.createElement(React.Fragment,null,React.createElement("div",{className:"relative"},React.createElement("div",{className:"pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3"},React.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","aria-hidden":"true",strokeWidth:1.5,stroke:"currentColor",className:(0,C.default)("h-5 w-5",{"bg-green-200":o,"text-green-800":o,"border-green-800":o,"rounded-lg":o})},o?React.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M9 12.75L11.25 15 15 9.75M21 12c0 1.268-.63 2.39-1.593 3.068a3.745 3.745 0 01-1.043 3.296 3.745 3.745 0 01-3.296 1.043A3.745 3.745 0 0112 21c-1.268 0-2.39-.63-3.068-1.593a3.746 3.746 0 01-3.296-1.043 3.745 3.745 0 01-1.043-3.296A3.745 3.745 0 013 12c0-1.268.63-2.39 1.593-3.068a3.745 3.745 0 011.043-3.296 3.746 3.746 0 013.296-1.043A3.746 3.746 0 0112 3c1.268 0 2.39.63 3.068 1.593a3.746 3.746 0 013.296 1.043 3.746 3.746 0 011.043 3.296A3.745 3.745 0 0121 12z"}):React.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"}))),React.createElement("input",{type:"text",value:n,name:t,autoComplete:"off",placeholder:a,onInput:i=>{l(i.target.value),r(i.target.value)},className:"block w-full rounded-lg border border-gray-300 bg-gray-50 p-2 pl-9 text-sm focus:border-blue-500 focus:ring-blue-500"})))},M=({resultItems:t,itemRenderer:o,onSelect:e,resultItemsKeyField:s})=>React.createElement("div",{className:"max-h-36 overflow-auto rounded-b-lg border-b border-l border-r border-gray-300"},React.createElement("div",{className:"w-max min-w-full"},t.map(a=>React.createElement("div",{key:a[s],onClick:()=>e(a),className:"border-b-solid last:border-b-none cursor-pointer border-b border-b-gray-300 bg-gray-50 px-2 py-0.5 hover:bg-blue-600 hover:text-white"},o(a))))),q=({name:t,label:o,searchTerm:e,onSearch:s,resultItems:a,resultItemsKeyField:r,itemRenderer:n,className:l,onSelect:i,selectedValue:w,placeholder:k})=>React.createElement("div",{className:l},React.createElement("label",{htmlFor:t,className:"mb-1 block text-sm font-medium"},o),React.createElement(G,{name:t,onSearch:s,searchTerm:e,selectedValue:w,placeholder:k}),(a&&a.length)>0&&React.createElement(M,{resultItems:a,itemRenderer:n,onSelect:i,resultItemsKeyField:r})),T=q;var u=b(m()),U=({name:t,label:o,options:e,selectedOption:s,onChange:a,className:r="",orientation:n="vert"})=>React.createElement("div",{className:(0,u.default)({"flex flex-row items-baseline":n=="horiz"},r)},React.createElement("label",{htmlFor:t,className:(0,u.default)({block:n=="vert","pr-1 uppercase":n=="horiz"},"mb-1 text-sm font-medium")},o),React.createElement("select",{id:t,value:s||void 0,onChange:l=>a(l.target.value),className:(0,u.default)({"block w-full":n=="vert"}," bg-caret-down appearance-none rounded-lg border border-gray-300 bg-gray-50 bg-[length:10px] bg-[center_right_10px] bg-no-repeat p-2 pr-5 text-sm focus:border-blue-500 focus:ring-blue-500")},e.map(l=>React.createElement("option",{key:l.value,value:l.value},l.label)))),p=U;var J=({gvk:t})=>React.createElement(React.Fragment,null,React.createElement("div",{className:"text-xs text-gray-400"},t.api_version),React.createElement("div",{className:"text-sm"},t.kind)),N=J;var V=({initialAttrs:t,ctx:o})=>{let[e,s]=y(o,t),a=e.result_types[e.request_type];return React.createElement(React.Fragment,null,!e.connection&&React.createElement(x,null),React.createElement("div",{className:"rounded-md border border-solid border-gray-300 font-inter font-medium text-gray-600"},React.createElement("div",{className:"border-b-solid flex gap-x-5 gap-y-3 border-b border-b-gray-300 bg-blue-100 p-3"},React.createElement(p,{name:"connection",label:"Connection",options:e.connections.map(r=>({label:r.variable,value:r.variable})),selectedOption:e.connection?.variable?.toString(),onChange:s("connection"),orientation:"horiz"}),React.createElement(p,{name:"request_type",label:"Request Type",options:e.request_types.map(r=>({label:r.toUpperCase(),value:r})),selectedOption:e.request_type,onChange:s("request_type"),orientation:"horiz"}),a&&React.createElement(p,{name:"result_type",label:"Result Type",options:a.map(r=>({label:r.toUpperCase(),value:r})),selectedOption:e.result_type,onChange:s("result_type"),orientation:"horiz"}),React.createElement(S,{label:"Assign To",name:"assign_to",defaultValue:e.result_variable,onChange:s("result_variable"),orientation:"horiz"})),React.createElement("div",{className:"flex gap-x-5 p-3"},e.connection&&React.createElement(T,{className:"max-w-full",name:"gvk",label:"Resource Kind",onSearch:s("search_term"),searchTerm:e.search_term,resultItemsKeyField:"index",resultItems:e.search_result_items,onSelect:s("gvk"),itemRenderer:r=>React.createElement(N,{gvk:r}),selectedValue:e.gvk?.kind,placeholder:"apps/v1 Deployment"}),e.namespaces&&React.createElement(p,{name:"namespace",label:"Namespace",options:e.namespaces.map(r=>({label:r,value:r})),selectedOption:e.namespace,onChange:s("namespace")}),e.resources&&React.createElement(p,{name:"resource",label:"Resource Name",options:e.resources.map(r=>({label:r,value:r})),selectedOption:e.resource,onChange:s("resource")}))))},A=V;var de=async(t,o)=>{await h(t,o),t.root.innerHTML="loading...",t.importCSS("main.css"),t.importCSS("https://fonts.googleapis.com/css2?family=Inter:wght@400;500&display=swap");let e=ReactDOM.createRoot(t.root);if(o.error)return e.render(React.createElement(v,{message:o.error}));e.render(React.createElement(A,{initialAttrs:o,ctx:t}))};export{de as init};
/*! Bundled license information:

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)
*/
//# sourceMappingURL=data:application/json;base64,
